{
  "compiler": {
    "infiniteLoop": "Infinite loop prevention: You have reached max amount of executed instructions {maxInstructionCount}, probably somewhere in your code you have infinite loop"
  },
  "views": {
    "general": {
      "currentlyActive": "active"
    },
    "navigation": {
      "step": "Step",
      "stepBack": "Step back",
      "run": "Run",
      "runBackwards": "Run backwards",
      "pause": "Pause",
      "reset": "Reset",
      "projects": "Projects",
      "settings": "Settings",
      "help": "Help",
      "debugMode": "Autosave disabled while debugging"
    },
    "projects": {
      "tabNames": {
        "openProject": "Open project"
      },
      "unsavedChangesAlert1": "You are currently in debugging mode, your project isn't automatically saved in this mode. You will lose your changes if you open different project",
      "unsavedChangesAlert2": "Turn off debugging mode and save changes",
      "openedProjectAutosaveInfo": "Opened project is automatically autosaved",
      "open": "Open project",
      "new": "Create new project",
      "rename": "Rename",
      "delete": "Delete",
      "download": "Download",
      "downloadAll": "Download all projects",
      "upload": "drag & drop .json/.zip files here",
      "toasts": {
        "renameCanceled": "Rename action canceled",
        "renamed": "Project \"{oldProjectName}\" renamed to \"{newProjectName}\"",
        "deleted": "Project \"{programName}\" deleted",
        "loading": "Loading project \"{programName}\"",
        "loaded": "Project \"{programName}\" loaded",
        "canceled": "Operation canceled",
        "imported": "Successfully imported \"{programName}\"",
        "importCanceled": "Import of project \"{programName}\" canceled by user",
        "allDeleted": "All projects were deleted"
      },
      "prompts": {
        "invalidFile": "Invalid file. Please import only files generated by this simulator",
        "invalidJson": "Invalid .json file. Please import only files generated by this simulator",
        "newProject": "Please type in new project name",
        "newProjectDefault": "New project",
        "projectsNotTheSame": "Project named \"{programName}\" already exists and it's content is different - load project from file?"
      }
    },
    "modules": {
      "codeEditor": "Code editor",
      "registers": "Registers",
      "memory": "Memory",
      "screen": "Screen",
      "keyboard": "Keyboard",
      "stack": "Stack segment",
      "calculator": "Calculator",
      "counter": "Executed instruction count"
    },
    "keyboard": {
      "scanCodes": "Scan codes",
      "clearBuffer": "Clear buffer",
      "ascii": "Decoded text"
    },
    "memory": {
      "jumpToOffset": "Jump to offset",
      "currentlyEditing": "You are currently editing address",
      "escToExit": "Esc to exit",
      "decodedText": "Decoded text"
    },
    "help": {
      "tabNames": {
        "beginning": "Beginning",
        "tutorial": "Tutorial",
        "runningProgram": "Stepping through the program",
        "modules": "Modules",
        "availableOpcodes": "Available opcodes",
        "aboutSim": "About simulator"
      },
	  "tabs": {
		"availableOpcodes": {
			"name": "Name",
			"explanation": "Explanation",
			"example": "Example",
			"operandCount": "Operands",
			"description": "Description",
			"note": "Note"
		}
	  }
    },
    "settings": {
      "tabNames": {
        "globalSettings": "Global settings",
        "projectSettings": "Current project settings",
        "resetSimulatorData": "Reset simulator data"
      },
      "globalSettings": {
        "help": "These settings will be applied to all projects",
        "labels": {
          "selectFormat": "Number format",
          "codeExecutionHistory": "Enable instruction execution history",
          "codeExecutionScroll": "Follow IP register in code editor",
          "animation": "Animate instruction execution",
          "animationSpeed": "Animation speed",
          "fastAnimation": "fast",
          "slowAnimation": "slow",
          "darkTheme": "Dark theme"
        },
        "questionCircles": {
          "selectFormat": "Example: base 10 signed: -11, base 10 unsigned: 65525, base 16: 0xFFF5, base 2: 1111111111110101",
          "codeExecutionHistory": "Simulation will be slower, but you will be able to rollback executed instructions",
          "codeExecutionScroll": "Code editor will automatically scroll to where  IP register points to",
          "darkTheme": "If turned on, simulator will switch to darker color palette",
          "animation": "If turned off, instructions will be executed without delay",
          "animationSpeed": "Delay between two executed instructions (in ms). Smaller number = faster animation"
        },
        "selectFormat": {
          "hex": "base 16",
          "signed": "base 10 signed",
          "unsigned": "base 10 unsigned",
          "bin": "base 2"
        }
      },
      "projectSettings": {
        "help": "These settings are applied only for currently opened project \"{projectName}\"",
        "labels": {
          "shownModules": "Shown modules"
        },
        "questionCircles": {
          "shownModules": "Hide unused modules in current project"
        }
      },
      "resetSimulatorDataSettings": {
        "resetAllBlack": "Use button below to reset simulator data. Simulator will reload again in tutorial mode",
        "resetAllRed": "This will delete all your PROJECTS and settings!",
        "resetAllBtn": "fully reset simulator data and settings",
        "resetProjectsBlack": "Use button below delete currently saved projects inside simulator without clearing settings. Tutorial projects won't be restored. Useful if you want to load .zip file containing all your projects",
        "resetProjectsRed": "This will delete all your PROJECTS!",
        "resetProjectsBtn": "delete all projects"
      }
    }
  },
  "tooltips": {
    "navigation": {
      "step": "Runs one instruction",
      "stepBack": "Rollbacks last executed instruction",
      "run": "Runs assembly program till the end or till the next breakpoint",
      "runBackwards": "Rollbacks previously run assembly program till the beginning or till the next breakpoint",
      "pause": "Pauses program execution",
      "reset": "Resets program execution",
      "projects": "Simulator can manage multiple projects",
      "settings": "Simulator and project configuration",
      "help": "Do you need help? Read the manual",
      "debugMode": "To return back to classic mode, click \"Reset\" button. Registers and memory will be returned to state before debug mode was turned on"
    },
    "registers": {
      "ip": "Instruction pointer register",
      "ax": "General purpose register ax",
      "bx": "General purpose register bx",
      "cx": "General purpose register cx",
      "dx": "General purpose register dx",
      "si": "Source index register",
      "di": "Destination index register",
      "bp": "Base pointer register",
      "sp": "Stack pointer register",
      "cf": "Carry flag",
      "pf": "Parity flag. Set to 1 if the result of arithmetic operation contains even number of ones",
      "af": "Auxiliary carry flag",
      "zf": "Zero flag. Set to 1 if the result of arithmetic operation is 0",
      "sf": "Sign flag. Set to 1 if the most significant digit of arithmetic operation is 1",
      "tf": "Trap flag",
      "if": "Interrupt enable flag",
      "df": "Direction flag (for string instructions)",
      "of": "Overflow flag. Set to if signed integer has overflown",
      "cs": "Code segment. Default segment for IP register",
      "ds": "Data segment. Default segment for BX, DI, SI registers",
      "ss": "Stack segment. Default segment for SP, BP registers",
      "es": "Extra segment. Usually used for string operations"
    },
    "autosave": "Your project is automatically saved \uD83D\uDE0E"
  },
  "instructions": {
    "add": "Adds two operands together",
    "and": "Bitwise and",
    "call": "Similar to JMP, but pushes content of IP to stack, so RET instruction can continue at that place",
    "cmp": "compares two operands together. Similar to SUB instruction, but CMP sets only FLAG register",
    "dec": "Decrements operand by one",
    "in": "Reads value from port. Simulator implements ports 0x60 and 0x64 to read values from keyboard",
    "inc": "Increments operand by one",
    "je": "Jumps if zero flag is set to 1",
    "jmp": "Jumps always",
    "jne": "Jumps if zero flag is set to 0",
    "jno": "Jumps if overflow flag is set to 0",
    "jnp": "Jumps if parity flag is set to 0",
    "jns": "Jumps if sign flag is set to 0",
    "jnz": "Jumps if zero flag is set to 0",
    "jo": "Jumps if overflow flag is set to 1",
    "jp": "jumps if parity flag is set to 1",
    "jpe": "(jump parity even) same as JP",
    "jpo": "(jump parity odd) same as JNP",
    "js": "Jumps if sign flag is set to 1",
    "jz": "Jumps if zero flag is set to 1",
    "mov": "Moves content of second operand to first operand",
    "mul": "Multiplication. Uses implicit AX as accumulator",
    "neg": "Bitwise negation",
    "nop": "No operation",
    "pop": "Pops 16-bit value from stack to operand",
    "push": "Pushes 16-bit value from operand to stack",
    "ret": "Return from CALL. Operand is amount of values to remove from stack. Don't forget, that return address needs to be removed from stack too",
    "sub": "Subtracts two operands together",
    "test": "Bitwise and, only flags are set",
    "xor": "Bitwise xor"
  }
}
