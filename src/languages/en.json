{
  "compiler": {
    "infiniteLoop": "Infinite loop prevention: You have reached max amount of executed instructions {maxInstructionCount}, probably somewhere in your code you have infinite loop"
  },
  "views": {
    "general": {
      "currentlyActive": "active"
    },
    "navigation": {
      "step": "Step",
      "stepBack": "Step back",
      "run": "Run",
      "runBackwards": "Run backwards",
      "pause": "Pause",
      "reset": "Reset",
      "projects": "Projects",
      "settings": "Settings",
      "help": "Help",
      "debugMode": "Autosave disabled while debugging"
    },
    "projects": {
      "openedProjectAutosaveInfo": "Opened project is automatically autosaved",
      "open": "Open project",
      "new": "Create new project",
      "rename": "Rename",
      "delete": "Delete",
      "download": "Download",
      "upload": "drag & drop .json/.zip files here"
    },
    "modules": {
      "codeEditor": "Code editor",
      "registers": "Registers",
      "memory": "Memory",
      "screen": "Screen",
      "keyboard": "Keyboard",
      "stack": "Stack segment",
      "calculator": "Calculator"
    },
    "keyboard": {
      "scanCodes": "Scan codes",
      "clearBuffer": "Clear buffer",
      "ascii": "Decoded text"
    },
    "memory": {
      "jumpToOffset": "Jump to offset",
      "currentlyEditing": "You are currently editing address",
      "escToExit": "Esc to exit",
      "decodedText": "Decoded text"
    }
  },
  "tooltips": {
    "navigation": {
      "step": "Runs one instruction",
      "stepBack": "Rollbacks last executed instruction",
      "run": "Runs assembly program till the end or till the next breakpoint",
      "runBackwards": "Rollbacks previously run assembly program till the beginning or till the next breakpoint",
      "pause": "Pauses program execution",
      "reset": "Resets program execution",
      "projects": "Simulator can manage multiple projects",
      "settings": "Simulator specific setting",
      "help": "Do you need help? Read it in help",
      "debugMode": "To return back to classic mode, click \"Reset\" button. Registers and memory will be returned to state before debug mode was turned on"
    },
    "registers": {
      "ip": "Instruction pointer register",
      "ax": "General purpose register ax",
      "bx": "General purpose register bx",
      "cx": "General purpose register cx",
      "dx": "General purpose register dx",
      "si": "Source index register",
      "di": "Destination index register",
      "bp": "Base pointer register",
      "sp": "Stack pointer register",
      "cf": "Carry flag",
      "pf": "Parity flag. Set to 1 if the result of arithmetic operation contains even number of ones",
      "af": "Auxiliary carry flag",
      "zf": "Zero flag. Set to 1 if the result of arithmetic operation is 0",
      "sf": "Sign flag. Set to 1 if the most significant digit of arithmetic operation is 1",
      "tf": "Trap flag",
      "if": "Interrupt enable flag",
      "df": "Direction flag (for string instructions)",
      "of": "Overflow flag. Set to if signed integer has overflown"
    }
  },
  "tutorial": {
    "tutorial1": "Welcome in x86sim! You see first example now on your screen.\nTo move to next example -> press Projects button on main navigation bar and select 'Example 2'"
  },
  "instructions": {
    "add": "Adds two operands together",
    "call": "Similar to JMP, but pushes current address to stack, so RET instruction can continue at that place",
    "cmp": "compares two operands together. Similar to SUB instruction, but CMP sets only FLAG register",
    "dec": "Decrements operand by one",
    "in": "",
    "inc": "Increments operand by one",
    "je": "Jumps if zero flag is set to 1",
    "jmp": "Jumps always",
    "jne": "Jumps if zero flag is set to 0",
    "jno": "Jumps if overflow flag is set to 0",
    "jnp": "Jumps if parity flag is set to 0",
    "jns": "Jumps if sign flag is set to 0",
    "jnz": "Jumps if zero flag is set to 0",
    "jo": "Jumps if overflow flag is set to 1",
    "jp": "jumps if parity flag is set to 1",
    "jpe": "(jump parity even) jumps if parity flag is set to 1. Same as JP",
    "jpo": "(jump parity odd) jumps if parity flag is set to 0. Same as JNP",
    "js": "Jumps if sign flag is set to 1",
    "jz": "Jumps if zero flag is set to 0",
    "mov": "Moves content of second operand to first operand",
    "mul": "Multiplication. Uses implicit AX as accumulator",
    "neg": "Bitwise negation",
    "nop": "No operation",
    "pop": "Pops 16-bit value from stack to operand",
    "push": "Pushes 16-bit value from operand to stack",
    "ret": "Return from CALL",
    "sub": "Subtracts two operands together",
    "test": "",
    "xor": "Applies bitwise xor operation of two operands together"
  }
}
